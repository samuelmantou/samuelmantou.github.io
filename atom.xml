<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[高超的技术博客]]></title>
  <link href="http://samuelmantou.github.io/atom.xml" rel="self"/>
  <link href="http://samuelmantou.github.io/"/>
  <updated>2014-04-27T11:08:47+08:00</updated>
  <id>http://samuelmantou.github.io/</id>
  <author>
    <name><![CDATA[高超]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[译 IMP of the Current Method]]></title>
    <link href="http://samuelmantou.github.io/blog/2014/04/27/imp-of-the-current-method/"/>
    <updated>2014-04-27T11:06:42+08:00</updated>
    <id>http://samuelmantou.github.io/blog/2014/04/27/imp-of-the-current-method</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[performSelector Case Weak 引发的思考]]></title>
    <link href="http://samuelmantou.github.io/blog/2014/04/03/performselector-case-weak/"/>
    <updated>2014-04-03T13:02:04+08:00</updated>
    <id>http://samuelmantou.github.io/blog/2014/04/03/performselector-case-weak</id>
    <content type="html"><![CDATA[<p>编程的用消息转发，发现如下错误
<img src="http://samuelmantou.github.io/images/performselector-case-weak/example_error.png" alt="image" />
中文意思是由于Selector是未知的 可能在使用PerformSelector时会导致内存泄露。
这里是stackoverflow.com上的讨论<a href="http://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown?answertab=votes#tab-top">http://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[递归调用 -- 《征服C指针》]]></title>
    <link href="http://samuelmantou.github.io/blog/2014/03/23/data-type-and-model-of-c/"/>
    <updated>2014-03-23T22:38:35+08:00</updated>
    <id>http://samuelmantou.github.io/blog/2014/03/23/data-type-and-model-of-c</id>
    <content type="html"><![CDATA[<p>下面是引用《征服C指针》的一段实例代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SWAP(a, b){int temp; temp =a; a = b; b = temp;}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort_sub</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data_size</span><span class="p">){</span>
</span><span class='line'>  <span class="n">quick_sort_sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">data_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort_sub</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">left_index</span> <span class="o">=</span> <span class="n">left</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">right_index</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">left_index</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">right_index</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">data</span><span class="p">[(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">left_index</span> <span class="o">&lt;=</span> <span class="n">right_index</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(;</span> <span class="n">data</span><span class="p">[</span><span class="n">left_index</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">;</span> <span class="n">left_index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(;</span> <span class="n">data</span><span class="p">[</span><span class="n">right_index</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">pivot</span><span class="p">;</span> <span class="n">right_index</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>          
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">left_index</span> <span class="o">&lt;=</span> <span class="n">right_index</span><span class="p">){</span>
</span><span class='line'>          <span class="n">SWAP</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">left_index</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="n">right_index</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">left_index</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_index</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">right_index</span> <span class="o">&gt;</span> <span class="n">left</span><span class="p">){</span>
</span><span class='line'>      <span class="n">quick_sort_sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right_index</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">left_index</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">){</span>
</span><span class='line'>      <span class="n">quick_sort_sub</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">left_index</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">};</span>
</span><span class='line'>  <span class="n">quick_sort</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//printf(&quot;%d\n&quot;, data[i]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello My Github Blog]]></title>
    <link href="http://samuelmantou.github.io/blog/2014/03/20/Hello-My-Github-Blog/"/>
    <updated>2014-03-20T22:22:34+08:00</updated>
    <id>http://samuelmantou.github.io/blog/2014/03/20/Hello-My-Github-Blog</id>
    <content type="html"><![CDATA[<h1>昨晚脑袋有点累，就弄了一个Github的博客。</h1>

<p>最近主要是想要攻下《征服C指针》</p>

<p><img src="http://samuelmantou.github.io/images/C_image.jpg" alt="image" /></p>

<p>下面试试写一行代码看看,哈哈</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">AFHTTPRequestOperationManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPRequestOperationManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">parameters</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;foo&quot;</span><span class="o">:</span> <span class="s">@&quot;bar&quot;</span><span class="p">};</span>
</span><span class='line'><span class="p">[</span><span class="n">manager</span> <span class="nl">POST:</span><span class="s">@&quot;http://example.com/resources.json&quot;</span> <span class="nl">parameters:</span><span class="n">parameters</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;JSON: %@&quot;</span><span class="p">,</span> <span class="n">responseObject</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>大部分都是向<a href="http://blog.devtang.com">唐巧</a>的博客里学的</p>

<p>下面是一段引用</p>

<blockquote><p>In programming languages, a closure is a function or reference to a function together with a referencing environment—a table storing a reference to each of the non-local variables (also called free variables or upvalues) of that function.</p></blockquote>
]]></content>
  </entry>
  
</feed>
